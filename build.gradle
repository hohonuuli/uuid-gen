
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.1.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    id 'maven-publish'

//    id "com.github.hierynomus.license" version "0.15.0"
    
    // Prettyify the test output -> https://github.com/radarsh/gradle-test-logger-plugin
    id 'com.adarshr.test-logger' version '1.6.0'

}

version = "0.1.4"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:26.0-jre'
    implementation 'com.fasterxml.uuid:java-uuid-generator:3.1.5'

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.4'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
    testImplementation 'junit:junit:4.12'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
        name = "MBARI"
        url = uri("https://maven.pkg.github.com/mbari-org/maven")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}


publishing {
    publications {
        gpr(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'org.mbari.uuid'
            artifactId project.name
            version project.version
        }
        // mavenJava(MavenPublication) {

        //     artifactId = project.name
        //     version = project.version

        //     from components.java
        //     artifact sourcesJar
        //     artifact javadocJar

        //     pom {
        //         name = "uuid-gen"
        //         description = "Java generators for UUID1, UUID4, UUID6 and others"
        //         url = "https://github.com/hohonuuli/uuid-gen"
        //         licenses {
        //             license {
        //                 name = "The Apache Software License, Version 2.0"
        //                 url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
        //             }
        //         }
        //         developers {
        //             developer {
        //                 id = "hohonuuli"
        //                 name = "Brian Schlining"
        //                 email = "bschlining@gmail.com"
        //             }
        //         }

        //         scm {
        //             connection = "https://github.com/hohonuuli/uuid-gen.git"
        //             url = "https://github.com/hohonuuli/uuid-gen"
        //         }
        //     }
        // }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/mbari-org/maven")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 2000
    showSummary true
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
}
